// Copyright (c) 2021 Storj Labs, Inc.
// See LICENSE for copying information.
//
// NOT autogenerated, but sort of a planned template for how autogenerated files WILL look

#ifndef DRPC_CPP_SESAMESTREET_PB_H
#define DRPC_CPP_SESAMESTREET_PB_H

#include <drpc.h>

namespace sesamestreet {

template <::drpc::AsyncWriteTransport TransportT>
class CookieMonsterAsyncClient {
public:
	using TransportType = TransportT;

	explicit CookieMonsterAsyncClient(TransportT aws)
		: conn {std::move(aws)} {
	}

	CookieMonsterAsyncClient(const CookieMonsterAsyncClient& rhs) = delete;
	CookieMonsterAsyncClient& operator=(const CookieMonsterAsyncClient& rhs) = delete;
	CookieMonsterAsyncClient(CookieMonsterAsyncClient&& rhs) noexcept = default;
	CookieMonsterAsyncClient& operator=(CookieMonsterAsyncClient&& rhs) noexcept = default;

	asio::awaitable<Crumbs> EatCookie(const Cookie& in) {
		Crumbs out;
		co_await conn.async_invoke(metadata, drpc::bytevec("/sesamestreet.CookieMonster/EatCookie"), in, out);
		co_return out;
	}

private:
	::drpc::AsyncConn<TransportT> conn;
	std::map<std::string, std::string> metadata;
};

template <::drpc::SyncWriteTransport TransportT>
class CookieMonsterSyncClient {
public:
	using TransportType = TransportT;

	explicit CookieMonsterSyncClient(TransportT aws)
		: conn {std::move(aws)} {
	}

	CookieMonsterSyncClient(const CookieMonsterSyncClient& rhs) = delete;
	CookieMonsterSyncClient& operator=(const CookieMonsterSyncClient& rhs) = delete;
	CookieMonsterSyncClient(CookieMonsterSyncClient&& rhs) noexcept = default;
	CookieMonsterSyncClient& operator=(CookieMonsterSyncClient&& rhs) noexcept = default;

	Crumbs EatCookie(const Cookie& in) {
		Crumbs out;
		conn.invoke(metadata, drpc::bytevec("/sesamestreet.CookieMonster/EatCookie"), in, out);
		return out;
	}

private:
	::drpc::Conn<TransportT> conn;
	std::map<std::string, std::string> metadata;
};

} // namespace sesamestreet

#endif  //DRPC_CPP_SESAMESTREET_PB_H
