// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sesamestreet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sesamestreet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sesamestreet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sesamestreet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sesamestreet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sesamestreet_2eproto;
namespace sesamestreet {
class Cookie;
struct CookieDefaultTypeInternal;
extern CookieDefaultTypeInternal _Cookie_default_instance_;
class Crumbs;
struct CrumbsDefaultTypeInternal;
extern CrumbsDefaultTypeInternal _Crumbs_default_instance_;
}  // namespace sesamestreet
PROTOBUF_NAMESPACE_OPEN
template<> ::sesamestreet::Cookie* Arena::CreateMaybeMessage<::sesamestreet::Cookie>(Arena*);
template<> ::sesamestreet::Crumbs* Arena::CreateMaybeMessage<::sesamestreet::Crumbs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sesamestreet {

enum Cookie_Type : int {
  Cookie_Type_Sugar = 0,
  Cookie_Type_Oatmeal = 1,
  Cookie_Type_Chocolate = 2,
  Cookie_Type_Cookie_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Cookie_Type_Cookie_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Cookie_Type_IsValid(int value);
constexpr Cookie_Type Cookie_Type_Type_MIN = Cookie_Type_Sugar;
constexpr Cookie_Type Cookie_Type_Type_MAX = Cookie_Type_Chocolate;
constexpr int Cookie_Type_Type_ARRAYSIZE = Cookie_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cookie_Type_descriptor();
template<typename T>
inline const std::string& Cookie_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cookie_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cookie_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cookie_Type_descriptor(), enum_t_value);
}
inline bool Cookie_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Cookie_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cookie_Type>(
    Cookie_Type_descriptor(), name, value);
}
// ===================================================================

class Cookie final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sesamestreet.Cookie) */ {
 public:
  inline Cookie() : Cookie(nullptr) {}
  ~Cookie() override;
  explicit constexpr Cookie(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cookie(const Cookie& from);
  Cookie(Cookie&& from) noexcept
    : Cookie() {
    *this = ::std::move(from);
  }

  inline Cookie& operator=(const Cookie& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cookie& operator=(Cookie&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cookie& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cookie* internal_default_instance() {
    return reinterpret_cast<const Cookie*>(
               &_Cookie_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cookie& a, Cookie& b) {
    a.Swap(&b);
  }
  inline void Swap(Cookie* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cookie* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cookie* New() const final {
    return new Cookie();
  }

  Cookie* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cookie>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cookie& from);
  void MergeFrom(const Cookie& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cookie* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sesamestreet.Cookie";
  }
  protected:
  explicit Cookie(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Cookie_Type Type;
  static constexpr Type Sugar =
    Cookie_Type_Sugar;
  static constexpr Type Oatmeal =
    Cookie_Type_Oatmeal;
  static constexpr Type Chocolate =
    Cookie_Type_Chocolate;
  static inline bool Type_IsValid(int value) {
    return Cookie_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Cookie_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Cookie_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Cookie_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Cookie_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Cookie_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Cookie_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .sesamestreet.Cookie.Type type = 1;
  void clear_type();
  ::sesamestreet::Cookie_Type type() const;
  void set_type(::sesamestreet::Cookie_Type value);
  private:
  ::sesamestreet::Cookie_Type _internal_type() const;
  void _internal_set_type(::sesamestreet::Cookie_Type value);
  public:

  // @@protoc_insertion_point(class_scope:sesamestreet.Cookie)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sesamestreet_2eproto;
};
// -------------------------------------------------------------------

class Crumbs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sesamestreet.Crumbs) */ {
 public:
  inline Crumbs() : Crumbs(nullptr) {}
  ~Crumbs() override;
  explicit constexpr Crumbs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Crumbs(const Crumbs& from);
  Crumbs(Crumbs&& from) noexcept
    : Crumbs() {
    *this = ::std::move(from);
  }

  inline Crumbs& operator=(const Crumbs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Crumbs& operator=(Crumbs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Crumbs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Crumbs* internal_default_instance() {
    return reinterpret_cast<const Crumbs*>(
               &_Crumbs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Crumbs& a, Crumbs& b) {
    a.Swap(&b);
  }
  inline void Swap(Crumbs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Crumbs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Crumbs* New() const final {
    return new Crumbs();
  }

  Crumbs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Crumbs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Crumbs& from);
  void MergeFrom(const Crumbs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crumbs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sesamestreet.Crumbs";
  }
  protected:
  explicit Crumbs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 1,
  };
  // .sesamestreet.Cookie cookie = 1;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  const ::sesamestreet::Cookie& cookie() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::sesamestreet::Cookie* release_cookie();
  ::sesamestreet::Cookie* mutable_cookie();
  void set_allocated_cookie(::sesamestreet::Cookie* cookie);
  private:
  const ::sesamestreet::Cookie& _internal_cookie() const;
  ::sesamestreet::Cookie* _internal_mutable_cookie();
  public:
  void unsafe_arena_set_allocated_cookie(
      ::sesamestreet::Cookie* cookie);
  ::sesamestreet::Cookie* unsafe_arena_release_cookie();

  // @@protoc_insertion_point(class_scope:sesamestreet.Crumbs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sesamestreet::Cookie* cookie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sesamestreet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cookie

// .sesamestreet.Cookie.Type type = 1;
inline void Cookie::clear_type() {
  type_ = 0;
}
inline ::sesamestreet::Cookie_Type Cookie::_internal_type() const {
  return static_cast< ::sesamestreet::Cookie_Type >(type_);
}
inline ::sesamestreet::Cookie_Type Cookie::type() const {
  // @@protoc_insertion_point(field_get:sesamestreet.Cookie.type)
  return _internal_type();
}
inline void Cookie::_internal_set_type(::sesamestreet::Cookie_Type value) {
  
  type_ = value;
}
inline void Cookie::set_type(::sesamestreet::Cookie_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sesamestreet.Cookie.type)
}

// -------------------------------------------------------------------

// Crumbs

// .sesamestreet.Cookie cookie = 1;
inline bool Crumbs::_internal_has_cookie() const {
  return this != internal_default_instance() && cookie_ != nullptr;
}
inline bool Crumbs::has_cookie() const {
  return _internal_has_cookie();
}
inline void Crumbs::clear_cookie() {
  if (GetArenaForAllocation() == nullptr && cookie_ != nullptr) {
    delete cookie_;
  }
  cookie_ = nullptr;
}
inline const ::sesamestreet::Cookie& Crumbs::_internal_cookie() const {
  const ::sesamestreet::Cookie* p = cookie_;
  return p != nullptr ? *p : reinterpret_cast<const ::sesamestreet::Cookie&>(
      ::sesamestreet::_Cookie_default_instance_);
}
inline const ::sesamestreet::Cookie& Crumbs::cookie() const {
  // @@protoc_insertion_point(field_get:sesamestreet.Crumbs.cookie)
  return _internal_cookie();
}
inline void Crumbs::unsafe_arena_set_allocated_cookie(
    ::sesamestreet::Cookie* cookie) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cookie_);
  }
  cookie_ = cookie;
  if (cookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sesamestreet.Crumbs.cookie)
}
inline ::sesamestreet::Cookie* Crumbs::release_cookie() {
  
  ::sesamestreet::Cookie* temp = cookie_;
  cookie_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sesamestreet::Cookie* Crumbs::unsafe_arena_release_cookie() {
  // @@protoc_insertion_point(field_release:sesamestreet.Crumbs.cookie)
  
  ::sesamestreet::Cookie* temp = cookie_;
  cookie_ = nullptr;
  return temp;
}
inline ::sesamestreet::Cookie* Crumbs::_internal_mutable_cookie() {
  
  if (cookie_ == nullptr) {
    auto* p = CreateMaybeMessage<::sesamestreet::Cookie>(GetArenaForAllocation());
    cookie_ = p;
  }
  return cookie_;
}
inline ::sesamestreet::Cookie* Crumbs::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable:sesamestreet.Crumbs.cookie)
  return _internal_mutable_cookie();
}
inline void Crumbs::set_allocated_cookie(::sesamestreet::Cookie* cookie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cookie_;
  }
  if (cookie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sesamestreet::Cookie>::GetOwningArena(cookie);
    if (message_arena != submessage_arena) {
      cookie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cookie, submessage_arena);
    }
    
  } else {
    
  }
  cookie_ = cookie;
  // @@protoc_insertion_point(field_set_allocated:sesamestreet.Crumbs.cookie)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sesamestreet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sesamestreet::Cookie_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sesamestreet::Cookie_Type>() {
  return ::sesamestreet::Cookie_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sesamestreet_2eproto
